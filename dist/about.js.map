{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/about.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Populate CMS Data from an external API.\n */\nwindow.fsAttributes = window.fsAttributes || [];\nwindow.fsAttributes.push([\n  'cmsfilter',\n  async (filtersInstances) => {\n    console.log(filtersInstances);\n    // Get the filters instance\n    const [filtersInstance] = filtersInstances;\n\n    // Get the list instance\n    const { listInstance } = filtersInstance;\n\n    // Save a copy of the template\n    const [firstItem] = listInstance.items;\n    const itemTemplateElement = firstItem.element;\n\n    // Fetch external data\n    const products = await fetchProducts();\n\n    console.log(products);\n\n    // Remove existing items\n    listInstance.clearItems();\n\n    // Create the new items\n    const newItems = products.jobs.map((product) => createItem(product, itemTemplateElement));\n\n    // Populate the list\n    await listInstance.addItems(newItems);\n\n    // Sync the CMSFilters instance with the newly created filters\n    filtersInstance.storeFiltersData();\n\n    // Show the list\n    document.querySelector('[job-list]').style.opacity = '1';\n  },\n]);\n\n/**\n * Fetches fake products from Fake Store API.\n * @returns An array of Product.\n */\nconst fetchProducts = async () => {\n  try {\n    const response = await fetch(\n      'https://boards-api.greenhouse.io/v1/boards/togetherai/jobs?content=true'\n    );\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    return [];\n  }\n};\n\n/**\n * Creates an item from the template element.\n * @param product The product data to create the item from.\n * @param templateElement The template element.\n *\n * @returns A new Collection Item element.\n */\nconst createItem = (product, templateElement) => {\n  // Clone the template element\n  const newItem = templateElement.cloneNode(true);\n\n  // Query inner elements\n  const label = newItem.querySelector('[data-label]');\n  const title = newItem.querySelector('[data-heading]');\n  const location = newItem.querySelector('[data-location]');\n  const link = newItem.querySelector('[data-button]');\n\n  // Populate inner elements\n  if (label) label.textContent = product.departments[0].name;\n  if (title) title.textContent = product.title;\n  if (location) location.textContent = product.location.name;\n  if (link) {\n    link.setAttribute('href', product.absolute_url);\n    link.target = '_blank'; // Open in a new tab\n  }\n\n  return newItem;\n};\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACG7F,SAAO,eAAe,OAAO,gBAAgB,CAAC;AAC9C,SAAO,aAAa,KAAK;AAAA,IACvB;AAAA,IACA,OAAO,qBAAqB;AAC1B,cAAQ,IAAI,gBAAgB;AAE5B,YAAM,CAAC,eAAe,IAAI;AAG1B,YAAM,EAAE,aAAa,IAAI;AAGzB,YAAM,CAAC,SAAS,IAAI,aAAa;AACjC,YAAM,sBAAsB,UAAU;AAGtC,YAAM,WAAW,MAAM,cAAc;AAErC,cAAQ,IAAI,QAAQ;AAGpB,mBAAa,WAAW;AAGxB,YAAM,WAAW,SAAS,KAAK,IAAI,CAAC,YAAY,WAAW,SAAS,mBAAmB,CAAC;AAGxF,YAAM,aAAa,SAAS,QAAQ;AAGpC,sBAAgB,iBAAiB;AAGjC,eAAS,cAAc,YAAY,EAAE,MAAM,UAAU;AAAA,IACvD;AAAA,EACF,CAAC;AAMD,MAAM,gBAAgB,YAAY;AAChC,QAAI;AACF,YAAM,WAAW,MAAM;AAAA,QACrB;AAAA,MACF;AACA,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,aAAO;AAAA,IACT,SAAS,OAAP;AACA,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AASA,MAAM,aAAa,CAAC,SAAS,oBAAoB;AAE/C,UAAM,UAAU,gBAAgB,UAAU,IAAI;AAG9C,UAAM,QAAQ,QAAQ,cAAc,cAAc;AAClD,UAAM,QAAQ,QAAQ,cAAc,gBAAgB;AACpD,UAAMA,YAAW,QAAQ,cAAc,iBAAiB;AACxD,UAAM,OAAO,QAAQ,cAAc,eAAe;AAGlD,QAAI;AAAO,YAAM,cAAc,QAAQ,YAAY,CAAC,EAAE;AACtD,QAAI;AAAO,YAAM,cAAc,QAAQ;AACvC,QAAIA;AAAU,MAAAA,UAAS,cAAc,QAAQ,SAAS;AACtD,QAAI,MAAM;AACR,WAAK,aAAa,QAAQ,QAAQ,YAAY;AAC9C,WAAK,SAAS;AAAA,IAChB;AAEA,WAAO;AAAA,EACT;",
  "names": ["location"]
}
